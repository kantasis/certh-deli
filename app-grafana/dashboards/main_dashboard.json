{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": 7,
  "links": [],
  "panels": [
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "c12d1bf3-ad89-41a8-b362-9eeab766a7ec"
      },
      "fieldConfig": {
        "defaults": {},
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 0,
        "y": 0
      },
      "id": 6,
      "options": {
        "baidu": {
          "callback": "bmapReady",
          "key": ""
        },
        "editor": {
          "format": "auto"
        },
        "editorMode": "visual",
        "gaode": {
          "key": "",
          "plugin": "AMap.Scale,AMap.ToolBar"
        },
        "getOption": "const series = context.panel.data.series.map((s) => {\n  const sData = s.fields.find((f) => f.type === 'number').values.buffer || s.fields.find((f) => f.type === 'number').values;\n  const sTime = s.fields.find((f) => f.type === 'time').values.buffer || s.fields.find((f) => f.type === 'time').values;\n  \n  return {\n    name: s.refId,\n    type: 'line',\n    showSymbol: false,\n    areaStyle: {\n      opacity: 0.1,\n    },\n    lineStyle: {\n      width: 1,\n    },\n    data: sData.map((d, i) => [sTime[i], d.toFixed(2)]),\n  };\n});\n\n/**\n * Enable Data Zoom by default\n */\nsetTimeout(() => context.panel.chart.dispatchAction({\n  type: 'takeGlobalCursor',\n  key: 'dataZoomSelect',\n  dataZoomSelectActive: true,\n}), 500);\n\n/**\n * Update Time Range on Zoom\n */\ncontext.panel.chart.on('datazoom', function (params) {\n  const startValue = params.batch[0]?.startValue;\n  const endValue = params.batch[0]?.endValue;\n  locationService.partial({ from: startValue, to: endValue });\n});\n\nreturn {\n  backgroundColor: 'transparent',\n  tooltip: {\n    trigger: 'axis',\n  },\n  legend: {\n    left: '0',\n    bottom: '0',\n    data: context.panel.data.series.map((s) => s.refId),\n    textStyle: {\n      color: 'rgba(128, 128, 128, .9)',\n    },\n  },\n  toolbox: {\n    feature: {\n      dataZoom: {\n        yAxisIndex: 'none',\n        icon: {\n          zoom: 'path://',\n          back: 'path://',\n        },\n      },\n      saveAsImage: {},\n    }\n  },\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n  grid: {\n    left: '2%',\n    right: '2%',\n    top: '2%',\n    bottom: 24,\n    containLabel: true,\n  },\n  series,\n};",
        "google": {
          "callback": "gmapReady",
          "key": ""
        },
        "map": "none",
        "renderer": "canvas",
        "themeEditor": {
          "config": "{}",
          "name": "default"
        },
        "visualEditor": {
          "code": "function getQueryResult(query_name) {\n  const result = context\n    .panel\n    .data\n    .series\n    .find((series_dict) =>\n      series_dict['refId'] === query_name\n    )\n    ;\n  if (!result)\n    console.log(`Error: Query with name ${query_name} not found`)\n  return result['fields'];\n}\n\nfunction getVariable(variable_name) {\n  return context.grafana.replaceVariables(`\\${${variable_name}}`);\n}\n\n// const selectedPolicy_name = getVariable('policy_filter');\n\nconst queryResult = getQueryResult('deli_predictive_query')\n\nriskFactor_str = 'Alcohol use'\n\n\nconst data_dict = {};\n\nqueryResult.forEach(column_dict => {\n  columnName_dict = column_dict['name'];\n  columnValues_Lst = column_dict['values'];\n  data_dict[columnName_dict] = columnValues_Lst\n});\n\ndata_dict['LoHi'] = [];\nfor (var i = 0; i < data_dict['Values'].length; i++) {\n  data_dict['LoHi'].push([\n    i,\n    data_dict['Values'][i] - data_dict['Error'][i],\n    data_dict['Values'][i] + data_dict['Error'][i],\n  ])\n}\n\nconsole.log(data_dict['Year Lag'])\nconsole.log(data_dict['Values'])\nconsole.log(data_dict['Error'])\n\noption = {\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'shadow'\n    }\n  },\n  // title: {\n  //    text: 'Error bar chart'\n  // },\n  legend: {\n    data: ['Value', 'Error']\n  },\n  // dataZoom: [\n  //    {\n  //       type: 'slider',\n  //       start: 50,\n  //       end: 70\n  //    },\n  //    {\n  //       type: 'inside',\n  //       start: 50,\n  //       end: 70\n  //    }\n  // ],\n  xAxis: {\n    data: data_dict['Year Lag']\n  },\n  yAxis: {},\n  series: [\n    {\n      type: 'bar',\n      name: 'Value',\n      data: data_dict['Values'],\n      itemStyle: {\n        color: '#77bef7'\n      }\n    },\n    {\n      type: 'custom',\n      name: 'Error',\n      itemStyle: {\n        borderWidth: 1.5\n      },\n      renderItem: function (params, api) {\n        var xValue = api.value(0);\n        var highPoint = api.coord([xValue, api.value(1)]);\n\n        var lowPoint = api.coord([xValue, api.value(2)]);\n        var halfWidth = api.size([1, 0])[0] * 0.1;\n        var style = api.style({\n          stroke: api.visual('color'),\n          // stroke: 'red',\n          lineWidth: 2,\n          fill: undefined\n        });\n\n        console.log('---------')\n        console.log(api.value(0))\n        console.log(api.value(1))\n        console.log(api.value(2))\n\n        return {\n          type: 'group',\n          children: [\n            {\n              type: 'line',\n              transition: ['shape'],\n              shape: {\n                x1: highPoint[0] - halfWidth,\n                y1: highPoint[1],\n                x2: highPoint[0] + halfWidth,\n                y2: highPoint[1]\n              },\n              style: style\n            },\n            {\n              type: 'line',\n              transition: ['shape'],\n              shape: {\n                x1: highPoint[0],\n                y1: highPoint[1],\n                x2: lowPoint[0],\n                y2: lowPoint[1]\n              },\n              style: style\n            },\n            {\n              type: 'line',\n              transition: ['shape'],\n              shape: {\n                x1: lowPoint[0] - halfWidth,\n                y1: lowPoint[1],\n                x2: lowPoint[0] + halfWidth,\n                y2: lowPoint[1]\n              },\n              style: style\n            }\n          ]\n        };\n      },\n      encode: {\n        x: 0,\n        y: [1, 2]\n      },\n      data: data_dict['LoHi'],\n      z: 100\n    }\n  ]\n};\n\nreturn option;\n",
          "dataset": [],
          "series": []
        }
      },
      "pluginVersion": "6.5.0",
      "targets": [
        {
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "SELECT \r\n   *\r\nFROM predictive_tbl\r\nWHERE true\r\n-- AND \"Year Lag\" = '1'\r\nAND \"Risk Factor\" = 'Alcohol use'\r\n;",
          "refId": "deli_predictive_query",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Panel Title",
      "type": "volkovlabs-echarts-panel"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "c12d1bf3-ad89-41a8-b362-9eeab766a7ec"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {},
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 12,
        "y": 0
      },
      "id": 2,
      "options": {
        "baidu": {
          "callback": "bmapReady",
          "key": ""
        },
        "editor": {
          "format": "none"
        },
        "editorMode": "code",
        "gaode": {
          "key": "",
          "plugin": "AMap.Scale,AMap.ToolBar"
        },
        "getOption": "\nfunction getSelections(multiSelectVar_name) {\n  // Get the variable\n  const multiSelect_var = context.grafana.replaceVariables(\"${\" + multiSelectVar_name + \"}\");\n  // Parse it if its multiselect\n  result = multiSelect_var.replace(/{/, '').replace(/}/, '').split(',');\n  return result;\n}\n\nfunction getQueryResult(query_name) {\n  return context\n    .panel\n    .data\n    .series\n    .find((series_dict) =>\n      series_dict['refId'] === query_name\n    )\n    ;\n}\n// console.log()\nconst countries_strLst = getSelections(\"country_filter\")\n\nconst queryResult = getQueryResult('deli_spider_query');\n\nconst indicators_arr = queryResult['fields']\n  .filter((column_dict) => column_dict['name'] !== 'Country')\n  .map((column_dict) => {\n    return {\n      name: column_dict['name'],\n      max: Math.max(...column_dict['values']),\n      color: \"#000\"\n    }\n  }\n  );\n\nlet dataFrame = {};\ncountries_strLst\n  .forEach((country_name, index) => {\n    const temp = queryResult['fields']\n      .filter((column_dict) => column_dict['name'] !== 'Country')\n      .map((column_dict) => {\n        return column_dict['values'][index]\n      })\n      ;\n    dataFrame[country_name] = temp;\n  })\n  ;\n\nconst columns_strLst = Object.keys(dataFrame);\n\nconst data_opt = columns_strLst\n  .map((column_name) => {\n    return {\n      value: dataFrame[column_name],\n      name: column_name\n    };\n  })\n  ;\n\noption = {\n  title: {\n    text: 'Nutrition Data'\n  },\n  legend: {\n    type: 'plain',\n    orient: 'vertical',\n    left: 'right'\n  },\n  tooltip: {\n    valueFormatter: (value) => parseFloat(value).toFixed(2)\n  },\n  radar: {\n    indicator: indicators_arr\n  },\n  series: [{\n    // name: \"\",\n    type: 'radar',\n    data: data_opt\n  }]\n};\nreturn option;\n\n",
        "google": {
          "callback": "gmapReady",
          "key": ""
        },
        "map": "none",
        "renderer": "canvas",
        "themeEditor": {
          "config": "{}",
          "name": "default"
        },
        "visualEditor": {
          "code": "return {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
          "dataset": [],
          "series": []
        }
      },
      "pluginVersion": "6.5.0",
      "targets": [
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "adn5a5w1lineoe"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "SELECT\n   \"Country\",\n   AVG(\"Diet low in whole grains_${factor_filter}\") AS \"Diet low in whole grains\",\n   AVG(\"Diet low in milk_${factor_filter}\") AS \"Diet low in milk\",\n   AVG(\"Diet high in red meat_${factor_filter}\") AS \"Diet high in red meat\",\n   AVG(\"Diet low in calcium_${factor_filter}\") AS \"Diet low in calcium\",\n   AVG(\"Diet low in fiber_${factor_filter}\") AS \"Diet low in fiber\",\n   AVG(\"Diet high in processed meat_${factor_filter}\") AS \"Diet high in processed meat\"\n   -- AVG(\"Diet low in fruits_${factor_filter}\") AS \"Diet low in fruits\",\n   -- AVG(\"Diet low in vegetables_${factor_filter}\") AS \"Diet low in vegetables\",\nFROM data_tbl\nWHERE true\n   AND \"Country\" IN ('Greece', 'Romania', 'Lithuania', 'Belgium', 'Italy', 'Spain')\n   -- AND \"Year\" BETWEEN ${minyear_filter} AND ${maxyear_filter}\n   AND \"age\" = 'Age-standardized'\nGROUP BY \"Country\"\nORDER BY 1\n;",
          "refId": "deli_spider_query",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "",
      "type": "volkovlabs-echarts-panel"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "c12d1bf3-ad89-41a8-b362-9eeab766a7ec"
      },
      "fieldConfig": {
        "defaults": {},
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 0,
        "y": 8
      },
      "id": 5,
      "options": {
        "baidu": {
          "callback": "bmapReady",
          "key": ""
        },
        "editor": {
          "format": "none"
        },
        "editorMode": "code",
        "gaode": {
          "key": "",
          "plugin": "AMap.Scale,AMap.ToolBar"
        },
        "getOption": "function getQueryResult(query_name) {\n   const result = context\n      .panel\n      .data\n      .series\n      .find((series_dict) =>\n         series_dict['refId'] === query_name\n      )\n   ;\n   if (!result)\n    console.log(`Error: Query with name ${query_name} not found`)\n   return result['fields'];\n}\n\nconst queryResult = getQueryResult('A')\nconsole.log(queryResult);\n\nconst countries_strLst = queryResult\n  .find( (column_dict) => column_dict['name'] == 'Country')\n  ['values']\n\nconst values_intLst = queryResult\n  .find( (column_dict) => column_dict['name'] == 'Value')\n  ['values']\n\n\nlet data_opt = []\n\ncountries_strLst\n  .forEach((country_name, index_int) => {\n    data_opt[index_int] = { name: country_name, value: values_intLst[index_int] };\n  })\n;\n//    .forEach((country_name, index_int) => {\n//       const result = { name: country_name, value: slice_dict[country_name] };\n//       data_opt[index_int] = result;\n\noption = {\n   title: {\n      text: 'Number of CRC Prevention Policies per Country',\n      left: 'center'\n   },\n   tooltip: {\n      trigger: 'item'\n   },\n   visualMap: {\n      min: 0,\n      max: 10,\n      left: 'left',\n      top: 'bottom',\n      text: ['High', 'Low'],\n      calculable: true\n   },\n   series: [\n      {\n         name: 'Alcohol',\n         type: 'map',\n         mapType: 'world', // Use 'world' map type, or you can use specific region map type if available\n         center: [15, 50], // Center the map on Europe\n         zoom: 6,\n         roam: false,\n         label: {\n            show: false\n         },\n         data: data_opt\n      }\n   ]\n};\n\nreturn option;\n\n",
        "google": {
          "callback": "gmapReady",
          "key": ""
        },
        "map": "none",
        "renderer": "canvas",
        "themeEditor": {
          "config": "{}",
          "name": "default"
        },
        "visualEditor": {
          "code": "return {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
          "dataset": [],
          "series": []
        }
      },
      "pluginVersion": "6.5.0",
      "targets": [
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "c12d1bf3-ad89-41a8-b362-9eeab766a7ec"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "SELECT\n   \"Country\",\n   \"Value\"\nFROM policies_tbl\nWHERE true\n   AND \"Policy\" = '${policy_filter}'\n;\n",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Test Visual",
      "type": "volkovlabs-echarts-panel"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "c12d1bf3-ad89-41a8-b362-9eeab766a7ec"
      },
      "fieldConfig": {
        "defaults": {},
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 12,
        "y": 8
      },
      "id": 3,
      "options": {
        "baidu": {
          "callback": "bmapReady",
          "key": ""
        },
        "editor": {
          "format": "none"
        },
        "editorMode": "code",
        "gaode": {
          "key": "",
          "plugin": "AMap.Scale,AMap.ToolBar"
        },
        "getOption": "\nfunction getSelections(multiSelectVar_name) {\n   // Get the variable\n   const multiSelect_var = context.grafana.replaceVariables(\"${\" + multiSelectVar_name + \"}\");\n   // Parse it if its multiselect\n   result = multiSelect_var.replace(/{/, '').replace(/}/, '').split(',');\n   return result;\n}\n\nfunction getQueryResult(query_name) {\n   return context\n      .panel\n      .data\n      .series\n      .find((series_dict) =>\n         series_dict['refId'] === query_name\n      )\n   ;\n}\n\nconst selectedCountries_strLst = getSelections(\"country_filter\")\n\nconst queryResult = getQueryResult('deli_lifestyle_query');\nconst allCountries_strLst = queryResult['fields']\n   .find((column_dict) => column_dict['name'] === 'Country')\n   ['values'];\n\nlet dataFrame = {};\ndataFrame['data']={};\n\n// console.log(queryResult);\nselectedCountries_strLst\n   .forEach((country_name, selectedCountry_idx) => {\n\n      country_idx = allCountries_strLst.indexOf(country_name);\n\n      // console.log(country_name)\n      // console.log(queryResult['fields']\n      //    .filter((column_dict) => column_dict['name'] !== 'Country')\n      //    .map((column_dict) => column_dict['values'][country_idx])\n      // );\n\n      const countryValues_arr = queryResult['fields']\n         .filter((column_dict) => column_dict['name'] !== 'Country')\n         .map((column_dict) => {\n            return column_dict['values'][country_idx]\n         })\n      ;\n      dataFrame['data'][country_name] = countryValues_arr;\n\n   })\n;\n\n\ndataFrame['index']=[];\nqueryResult['fields']\n   .filter((column_dict) => column_dict['name'] !== 'Country')\n   .forEach((column_dict, index) => {\n      dataFrame['index'][index] = column_dict['name'];\n   })\n;\n\ndataFrame['columns'] = Object.keys(dataFrame['data']);\n\n// console.log(dataFrame);\n\nconst data_opt = [\n   [ 'Risk Factor', ...dataFrame['columns'] ],\n\n   ...dataFrame['index']\n      .map((index_str, index_idx) => {\n         let temp=[];\n         dataFrame['columns']\n            .forEach((column_name, column_idx) => {\n               temp[column_idx] = dataFrame.data[column_name][index_idx]\n            })\n         ;\n         return [\n            index_str,\n            ...temp\n         ]\n      })\n   ,\n];\n\n// console.log(data_opt);\n\n\noption = {\n   title: {\n      text: 'Lifestyle Data'\n   },\n   legend: {\n      type: 'plain',\n      orient: 'vertical',\n      left: 'right'\n   },\n   tooltip: {\n      valueFormatter: (value) => parseFloat(value).toFixed(2)\n   },\n   xAxis: { type: 'category' },\n   yAxis: {},\n\n   // Declare several bar series, each will be mapped\n   // to a column of dataset.source by default.\n   series: dataFrame['columns']\n      .map((column_name) => {\n         return { type: 'bar' };\n      }),\n   \n   dataset: {\n      source: data_opt\n   }\n};\nreturn option;\n\n",
        "google": {
          "callback": "gmapReady",
          "key": ""
        },
        "map": "none",
        "renderer": "canvas",
        "themeEditor": {
          "config": "{}",
          "name": "default"
        },
        "visualEditor": {
          "code": "let averages_flst = [];\nlet maxes_flst = [];\nlet countries_slst = [];\n\ndata.series.map((s) => {\n\n  // console.log(s)\n\n  values_fLst = s.fields.find((f) =>\n    f.name === 'averages'\n  ).values;\n\n  maxes_flst = s.fields.find((f) =>\n    f.name === 'maxes'\n  ).values;\n\n  countries_sLst = s.fields.find((f) =>\n    f.name === 'countries'\n  ).values;\n\n});\n\n\nindicator_Lst = [];\nmax_f = Math.max(...values_fLst);\n\nconsole.log(maxes_flst);\nconsole.log(countries_sLst);\nconsole.log(max_f);\n\nfor (let i in countries_sLst) {\n  indicator_Lst[i] = {\n    name: countries_sLst[i],\n    max: max_f,\n  }\n};\n\nreturn {\n  title: {\n    text: 'Basic Radar Chart'\n  },\n  // legend: {\n  //    data: ['Allocated Budget', 'Actual Spending']\n  // },\n  radar: {\n    // shape: 'circle',\n    indicator: indicator_Lst\n  },\n  series: [\n    {\n      name: 'Budget vs spending',\n      type: 'radar',\n      data: [\n        {\n          value: values_fLst\n          // name: 'Allocated Budget'\n        }\n      ]\n    }\n  ]\n};\n",
          "dataset": [
            {
              "name": "averages",
              "source": "deli_spider_query"
            }
          ],
          "series": []
        }
      },
      "pluginVersion": "6.5.0",
      "targets": [
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "adn5a5w1lineoe"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "SELECT\n   \"Country\",\n   AVG(\"Alcohol use_${factor_filter}\") AS \"Alcohol Use\",\n   AVG(\"Smoking_${factor_filter}\") AS \"Smoking\",\n   AVG(\"Low physical activity_${factor_filter}\") AS \"Low Physical Activity\",\n   AVG(\"High body-mass index_${factor_filter}\") AS \"High Body-Mass Index\"\nFROM data_tbl\nWHERE true\n   AND \"Country\" IN ('Greece', 'Romania', 'Lithuania', 'Belgium', 'Italy', 'Spain')\n   AND \"Year\" BETWEEN ${minyear_filter} AND ${maxyear_filter}\n   AND \"age\" = 'Age-standardized'\nGROUP BY \"Country\"\nORDER BY 1\n;\n",
          "refId": "deli_lifestyle_query",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "",
      "type": "volkovlabs-echarts-panel"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "c12d1bf3-ad89-41a8-b362-9eeab766a7ec"
      },
      "fieldConfig": {
        "defaults": {},
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 0,
        "y": 16
      },
      "id": 1,
      "options": {
        "baidu": {
          "callback": "bmapReady",
          "key": ""
        },
        "editor": {
          "format": "none"
        },
        "editorMode": "code",
        "gaode": {
          "key": "",
          "plugin": "AMap.Scale,AMap.ToolBar"
        },
        "getOption": "\nfunction getSelections(multiSelectVar_name) {\n   // Get the variable\n   const multiSelect_var = context.grafana.replaceVariables(\"${\" + multiSelectVar_name + \"}\");\n   // Parse it if its multiselect\n   result = multiSelect_var.replace(/{/, '').replace(/}/, '').split(',');\n   return result;\n }\n \nfunction getSeriesByName(series_name) {\n   return context\n      .panel\n      .data\n      .series\n      .map((series_dict) => {\n         \n         const series_temp = series_dict\n            .fields\n            .find((item) => item.name === series_name)\n         ;\n\n         if (series_temp === undefined) {\n            console.log(`ERROR (getSeriesByName()): Could not find series by name: ${series_name}`)\n            return null;\n         }\n\n         const seriesValues_temp = series_temp.values\n         return seriesValues_temp.buffer || seriesValues_temp;\n      })[0];\n}\n\nconst countries_strLst = getSelections(\"country_filter\")\nconst series_lst = countries_strLst.map((country_name) => getSeriesByName(country_name))\nconst xaxis_ser = getSeriesByName(\"Year\");\nconst seriesOptions_lst = series_lst.map((data_series, index) => {\n   return {\n      data: data_series,\n      type: 'line',\n      name: countries_strLst[index]\n   }\n});\n\noption = {\n   title: {\n      text: \"Age-Standardised CRC Incidence\",\n   },\n   legend: {\n      type: 'plain',\n      orient: 'vertical',\n      left: 'right'\n   },\n   tooltip: {\n      valueFormatter: (value) => parseFloat(value).toFixed(2)\n   },\n   xAxis: {\n      name: 'Year',\n      nameLocation: 'center',\n      nameGap: 30,\n      type: 'category',\n      data: xaxis_ser\n   },\n   yAxis: {\n      name: 'CRC incidence per 100000',\n      nameLocation: 'center',\n      nameGap: 60,\n      type: 'value',\n      min: 'dataMin'\n   },\n   dataZoom: [\n      {\n         type: 'slider',\n         show: true,\n         xAxisIndex: [0],\n         start: 0,\n         end: 100\n      },\n      {\n         type: 'inside',\n         xAxisIndex: [0],\n         start: 0,\n         end: 100\n      }\n   ],\n   series: seriesOptions_lst\n};\n\nreturn option;\n",
        "google": {
          "callback": "gmapReady",
          "key": ""
        },
        "map": "none",
        "renderer": "canvas",
        "themeEditor": {
          "config": "{}",
          "name": "default"
        },
        "visualEditor": {
          "code": "return {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
          "dataset": [],
          "series": []
        }
      },
      "pluginVersion": "6.5.0",
      "targets": [
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "adn5a5w1lineoe"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "CREATE EXTENSION IF NOT EXISTS tablefunc;\n\nSELECT \n   *\nFROM crosstab('\n   SELECT \n      \"Year\" as year_str,\n      \"Country\" as country_str,\n      AVG(\"CRC_incidence_val_Rate\") as values_f\n   FROM data_tbl \n   WHERE true\n      AND \"Year\" BETWEEN ${minyear_filter} AND ${maxyear_filter}\n      AND \"age\" = ''Age-standardized''\n      AND \"Country\" IN (''Belgium'', ''Greece'', ''Italy'', ''Lithuania'', ''Romania'', ''Spain'')\n   GROUP BY\n      \"Country\",\n      \"Year\"\n   ORDER BY 1, 2\n',\n'\nSELECT \n   *\nFROM ( VALUES \n   (''Belgium''), (''Greece''), (''Italy''), (''Lithuania''), (''Romania''), (''Spain'')\n)\n'\n) AS ct (\n   \"Year\" INT,\n   \"Belgium\" DOUBLE PRECISION,\n   \"Greece\" DOUBLE PRECISION,\n   \"Italy\" DOUBLE PRECISION,\n   \"Lithuania\" DOUBLE PRECISION,\n   \"Romania\" DOUBLE PRECISION,\n   \"Spain\" DOUBLE PRECISION\n)\nORDER BY ct.\"Year\"\n;\n\n",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "",
      "type": "volkovlabs-echarts-panel"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "c12d1bf3-ad89-41a8-b362-9eeab766a7ec"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {},
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 0,
        "y": 24
      },
      "id": 4,
      "options": {
        "baidu": {
          "callback": "bmapReady",
          "key": ""
        },
        "editor": {
          "format": "auto"
        },
        "editorMode": "code",
        "gaode": {
          "key": "",
          "plugin": "AMap.Scale,AMap.ToolBar"
        },
        "getOption": "function getQueryResult(query_name) {\n   const result = context\n      .panel\n      .data\n      .series\n      .find((series_dict) =>\n         series_dict['refId'] === query_name\n      )\n      ;\n   if (!result)\n      console.log(`Error: Query with name ${query_name} not found`)\n   return result['fields'];\n}\n\nfunction getVariable(variable_name) {\n   return context.grafana.replaceVariables(`\\${${variable_name}}`);\n}\n\nconst selectedPolicy_name = getVariable('policy_filter');\n\nconst queryResult = getQueryResult('deli_policy_query')\n\nconst drilldownResult = getQueryResult('deli_policy2_query');\n\nlet euCountries_strLst = [\n   \"Austria\",\n   \"Belgium\",\n   \"Bulgaria\",\n   \"Croatia\",\n   \"Cyprus\",\n   \"Czech Republic\",\n   \"Denmark\",\n   \"Estonia\",\n   \"Finland\",\n   \"France\",\n   \"Germany\",\n   \"Greece\",\n   \"Hungary\",\n   \"Ireland\",\n   \"Italy\",\n   \"Latvia\",\n   \"Lithuania\",\n   \"Luxemburg\",\n   \"Malta\",\n   \"Netherlands\",\n   \"Poland\",\n   \"Portugal\",\n   \"Romania\",\n   \"Slovakia\",\n   \"Slovenia\",\n   \"Spain\",\n   \"Sweden\"\n];\n\nlet countryPolicies_dict = {}\n\neuCountries_strLst.forEach(country_str => {\n   countryPolicies_dict[country_str] = [];\n});\n\nconst policyTypes_strLst = drilldownResult\n   .find((element_dict) => element_dict['name'] === 'Type')\n['values'];\n\ndrilldownResult\n   .find((element_dict) => element_dict['name'] === 'Country')\n['values']\n   .forEach((country_name, index_int) => {\n      countryPolicies_dict[country_name].push(policyTypes_strLst[index_int])\n   })\n   ;\n\nfunction tooltipFormatter_fun(params_dict, ticket, callback) {\n   const country_name = params_dict['name'];\n   const policies_cnt = params_dict['value'];\n\n   if (!(country_name in countryPolicies_dict))\n      return `<p>Policies: Unknown</p>`;\n      \n   const policies_strLst = countryPolicies_dict[country_name];\n\n   if (policies_strLst.length == 0)\n      return `<p>Policies: None</p>`;\n\n   let tooltip_html = policies_strLst\n      .map((policyType_str) => `<li>${policyType_str}</li>`)\n      .join('')\n   ;\n\n   return `\n      <p>Policies:${policies_cnt}</p>\n      <ul>${tooltip_html}</ul>\n   `;\n   // return countryPolicies_dict[params_dict['name']]\n   // ;\n   // return \"<ul>fool!</ul>\";\n}\n\nlet maxPolicies_f = 0;\n\nlet data_opt = []\nfor (const key in countryPolicies_dict) {\n   data_opt.push({\n      \"name\": key,\n      \"value\": countryPolicies_dict[key].length\n   });\n   maxPolicies_f = Math.max(maxPolicies_f, countryPolicies_dict[key].length);\n}\n\noption = {\n   title: {\n      text: 'Number of CRC Prevention Policies per Country',\n      left: 'center'\n   },\n   tooltip: {\n      trigger: 'item',\n      formatter: tooltipFormatter_fun,\n   },\n   visualMap: {\n      min: 0,\n      max: maxPolicies_f,\n      left: 'left',\n      top: 'bottom',\n      text: ['High', 'Low'],\n      calculable: true\n   },\n   series: [\n      {\n         name: selectedPolicy_name,\n         type: 'map',\n         mapType: 'world', // Use 'world' map type, or you can use specific region map type if available\n         center: [15, 50], // Center the map on Europe\n         zoom: 6,\n         roam: false,\n         label: {\n            show: false\n         },\n         data: data_opt\n      }\n   ]\n};\n\nreturn option;\n\n",
        "google": {
          "callback": "gmapReady",
          "key": ""
        },
        "map": "json",
        "renderer": "svg",
        "themeEditor": {
          "config": "{}",
          "name": "default"
        },
        "visualEditor": {
          "code": "return {\n  dataset: context.editor.dataset,\n  series: [\n    {\n      type: \"map\",\n      map: 'world',\n      name: 'requests',\n      left: 0,\n      right: 0,\n      roam: false,\n      label: {\n        show: true,\n        formatter: (d) => {\n          if (!d.data || d.data.value <= labelValue)\n            return '';\n          return d.name;\n        }\n      },\n      emphasis: {\n        itemStyle: {\n          areaColor: '#ff5656'\n        },\n        label: {\n          show: true\n        }\n      },\n      data: {\n        'Greece': 100,\n        'Italy': 150,\n      }\n    }\n  ],\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
          "dataset": [
            {
              "name": "Country",
              "source": "deli_lifestyle_query"
            },
            {
              "name": "Alcohol Use",
              "source": "deli_lifestyle_query"
            }
          ],
          "series": []
        }
      },
      "pluginVersion": "6.5.0",
      "targets": [
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "c12d1bf3-ad89-41a8-b362-9eeab766a7ec"
          },
          "editorMode": "code",
          "format": "table",
          "hide": false,
          "rawQuery": true,
          "rawSql": "SELECT\n   \"Country\",\n   count(id) as \"Value\"\nFROM policies_tbl\nWHERE true\n   AND \"Policy\" = '${policy_filter}'\n   AND \"Comment\" != ''\nGROUP BY \"Country\", \"Policy\"\n;\n",
          "refId": "deli_policy_query",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        },
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "c12d1bf3-ad89-41a8-b362-9eeab766a7ec"
          },
          "editorMode": "code",
          "format": "table",
          "hide": false,
          "rawQuery": true,
          "rawSql": "SELECT\n   \"Country\",\n   \"Type\"\nFROM policies_tbl\nWHERE true\n   AND \"Policy\" = '${policy_filter}'\n   AND \"Comment\" != ''\n;\n",
          "refId": "deli_policy2_query",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "",
      "type": "volkovlabs-echarts-panel"
    }
  ],
  "preload": false,
  "refresh": "",
  "schemaVersion": 40,
  "tags": [],
  "templating": {
    "list": [
      {
        "current": {
          "text": "1",
          "value": "1"
        },
        "includeAll": false,
        "label": "deli_custom_label",
        "name": "deli_custom_var",
        "options": [],
        "query": "",
        "type": "custom"
      },
      {
        "current": {
          "text": [
            "Greece",
            "Romania",
            "Lithuania"
          ],
          "value": [
            "Greece",
            "Romania",
            "Lithuania"
          ]
        },
        "includeAll": false,
        "multi": true,
        "name": "country_filter",
        "options": [
          {
            "selected": true,
            "text": "Greece",
            "value": "Greece"
          },
          {
            "selected": true,
            "text": "Romania",
            "value": "Romania"
          },
          {
            "selected": true,
            "text": "Lithuania",
            "value": "Lithuania"
          },
          {
            "selected": false,
            "text": "Belgium",
            "value": "Belgium"
          },
          {
            "selected": false,
            "text": "Italy",
            "value": "Italy"
          },
          {
            "selected": false,
            "text": "Spain",
            "value": "Spain"
          }
        ],
        "query": "Greece, Romania, Lithuania, Belgium, Italy, Spain",
        "type": "custom"
      },
      {
        "current": {
          "text": "1990",
          "value": "1990"
        },
        "name": "minyear_filter",
        "options": [
          {
            "selected": true,
            "text": "1990",
            "value": "1990"
          }
        ],
        "query": "1990",
        "type": "textbox"
      },
      {
        "current": {
          "text": "2020",
          "value": "2020"
        },
        "name": "maxyear_filter",
        "options": [
          {
            "selected": true,
            "text": "2020",
            "value": "2020"
          }
        ],
        "query": "2020",
        "type": "textbox"
      },
      {
        "current": {
          "text": "Rate_SEV_val",
          "value": "Rate_SEV_val"
        },
        "description": "",
        "name": "factor_filter",
        "options": [
          {
            "selected": true,
            "text": "Rate_SEV_val",
            "value": "Rate_SEV_val"
          }
        ],
        "query": "Rate_SEV_val",
        "type": "textbox"
      },
      {
        "current": {
          "text": "Mental Health",
          "value": "Mental Health"
        },
        "name": "policy_filter",
        "options": [
          {
            "selected": true,
            "text": "Mental Health",
            "value": "Mental Health"
          }
        ],
        "query": "Mental Health",
        "type": "textbox"
      }
    ]
  },
  "time": {
    "from": "now-6h",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "browser",
  "title": "deli_main_dashboard",
  "uid": "edn5ahxrzaw3kc",
  "version": 13,
  "weekStart": ""
}